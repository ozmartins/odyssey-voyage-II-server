extend schema @link(url: "https://specs.apollo.dev/federation/v2.0", import: ["@key", "@shareable"])

#Queries
type Query {
    featuredListings: [Listing]!
    searchListings(criteria: SearchListingsInput): [Listing]!
    hostListings: [Listing]!
    listing(id: ID!): Listing
    listingAmenities: [Amenity]!
}

#Mutations
type Mutation {
    createListing(listing: CreateListingInput!): CreateListingResponse!
    updateListing(listingId: ID!, listing: UpdateListingInput!): UpdateListingResponse!
}

#Types
type Listing @key(fields: "id"){
    id: ID!
    title: String!
    description: String!
    photoThumbnail: String!
    numOfBeds: Int!
    costPerNight: Float!
    locationType: LocationType!
    host: Host!
    amenities: [Amenity]
    totalCost(checkInDate: String!, checkOutDate: String!): Float!
    overallRating: Int
    coordinates: GalacticCoordinates
}

type Amenity {
    id: ID!
    category: AmenityCategory
    name: String!
}

type CreateListingResponse implements MutationResponse {  
  code: Int!
  success: Boolean!
  message: String!  
  listing: Listing
}

type UpdateListingResponse implements MutationResponse {
  code: Int!
  success: Boolean!
  message: String!  
  listing: Listing
}

#Entities
type Booking @key(fields: "id") {
    id: ID!
    #todo: n√£o sei resolver esse campo
    #totalPrice: Float!    
}

type Review @key(fields: "id") {
    id: ID!
}

type Host implements User @key(fields: "id") {
    id: ID!    
}

type GalacticCoordinates @shareable {
  latitude: Float!
  longitude: Float!
}

#Inputs
input SearchListingsInput {
    checkInDate: String!
    checkOutDate: String!
    numOfBeds: Int
    page: Int
    limit: Int
    sortBy: SortByCriteria
}

input CreateListingInput {  
  title: String!  
  description: String!  
  photoThumbnail: String!  
  numOfBeds: Int!  
  costPerNight: Float!  
  locationType: LocationType!
  amenities: [ID!]!
}

input UpdateListingInput {
  title: String  
  description: String  
  photoThumbnail: String
  numOfBeds: Int  
  costPerNight: Float  
  locationType: LocationType
  amenities: [ID]
}

#Interfaces
interface User {
    id: ID!
}

interface MutationResponse {
  code: Int!
  success: Boolean!
  message: String!
}

#Enums
enum SortByCriteria {
    COST_ASC
    COST_DESC
}

enum LocationType {
    SPACESHIP
    HOUSE
    CAMPSITE
    APARTMENT
    ROOM
}

enum AmenityCategory {
    ACCOMMODATION_DETAILS
    SPACE_SURVIVAL
    OUTDOORS
}